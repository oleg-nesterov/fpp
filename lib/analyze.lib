u = fpp_library("util.lib");

// Much simpler than fi.dynamicSmoothing() and works just as well.
//
// https://cytomic.com/files/dsp/DynamicSmoothing.pdf
// diff:
//	- use 'sens' as is
//	- new arg 'fmax' to avoid the hardcoded '1' which corresponds
//	  to fmax = ma.SR/4 in this code. Allows to damp overshoots.
//
__dynasmoo(fc, fmax, sens) = tick ~ (_,_) with {
	g0(f) = 2 * gc / (1 + gc) with {
		gc = tan(ma.PI / ma.SR * f);
	};

	tick(lp1z,lp2z, inp) = lp1,lp2 with {
		g = g0(fc) + sens * abs(lp1z - lp2z)
			: min(g0(fmax));

		lp1 = lp1z + g * (inp - lp1z);
		lp2 = lp2z + g * (lp1 - lp2z);
	};
};

dynasmoo = __dynasmoo : !,_;

// for ba.time or const input:
// s = 1 - 2/(N+1)			 "exact" mean
// s = 1 - (sqrt(12*(N^2+2))-6)/(N^2-1)  "exact" variance
//
smoo_stat = FPP(upd, s, x) {
decl:	float	$avg = 0, $var = 0; //reset
exec:
	float s = $s, x = $x;
	float diff = x - $avg;
	float incr = (1-s) * diff;
	int upd = $upd;
	if (upd < 0)
		$avg = $var = 0;
	else if (upd > 0) {
		$avg += incr;
		$var = s * ($var + diff * incr);
	}
	[=$avg, =$var];
};

// relative standard deviation
stat_rsd(a,v) = a, select2(abs(a) > ma.EPSILON, 0, sqrt(v)/abs(a));

// ----------------------------------------------------------------------------
// +-1 after reset, then +-2
range_cross = FPP(lo,hi, in) pure _int_ {
decl:	int $st = 0;
exec:	auto lo = $lo; auto hi = $hi;
	auto in = $in; int  st = $st;

	if	(in < lo) $st = -1;
	else if (in > hi) $st = +1;

	$st - st;
};

// prev value was local extremum
extremum = _ <: mem-_ : range_cross(0,0);

env_foll2 = FPP(rel, in) {
decl:	float $lo = 0, $hi = 0;
exec:	float p  = $(ba.tau2pole(rel));
	float in = $in, lo = $lo, hi = $hi;
	int   gr = in < lo ? -1 :
		   in > hi ? +1 :
		   0;

//	$lo = in < lo ? in : hi + p * (lo - hi);
//	$hi = in > hi ? in : lo + p * (hi - lo);

	float ct = (lo + hi)/2;
	$lo = gr < 0 ? in : ct + p * (lo - ct);
	$hi = gr > 0 ? in : ct + p * (hi - ct);

	[gr, =$lo, =$hi];
};

// ----------------------------------------------------------------------------
__pick_peaks = FPP(i_extr, i_peak) _int_,unsigned,float {
FILE:	#include <$_INCDIR_/fpp.h>
decl:	int		$s_extr = 0; // reset
	unsigned	$s_time;
	float		$s_peak;

stmt:	unsigned	$r_time;
	float		$r_peak;

exec:	int i_extr = $i_extr, r_extr = 0;
	float i_peak = $i_peak;

	if (!i_extr) {
		goto ret;
	} else if (i_extr != $s_extr) {
		r_extr = $s_extr; $r_time = $s_time; $r_peak = $s_peak;
		$s_extr = i_extr;
	} else if (i_extr != signum(i_peak - $s_peak)) {
		goto ret;
	}

	$s_time = $(u.iota); $s_peak = i_peak;
	ret: [r_extr, =$r_time, =$r_peak]
};

pick_peaks(rel) = _ <: (env_foll2(rel) : _,!,!), _ : __pick_peaks;

// ----------------------------------------------------------------------------
__pick_turns = FPP(rel,sens, i_extr, i_peak) _int_,unsigned,float {
FILE:	#include <$_INCDIR_/fpp.h>
decl:	int		$s_extr = 0; // reset
	unsigned	$s_time = 0;
	float		$s_peak = 0;
	float		$s_leap = 0;

stmt:	unsigned	$r_time;
	float		$r_peak;

exec:	int i_extr = $i_extr, r_extr = 0;
	unsigned i_time = $(u.iota) - 1;
	float i_peak = $i_peak;

	float	__leap = i_peak - $s_peak,
		i_leap = fabsf(__leap);

	if (!i_extr)
		;
	else if (i_extr == $s_extr) {
		if (signum(i_extr) == signum(__leap)) {
			$s_time = i_time;
			$s_peak = i_peak;
		}
	} else if (i_leap > $s_leap) {
		$s_leap = fmaxf($s_leap, i_leap * $sens);
		$r_time = $s_time; $r_peak = $s_peak;
		$s_time =  i_time; $s_peak =  i_peak;
		$s_extr =  r_extr = i_extr;
	}

	$s_leap *= $(ba.tau2pole(rel));
	[r_extr, =$r_time, =$r_peak];
};

pick_turns(rel,sens) = _ <: extremum, mem : __pick_turns(rel, sens);

// ----------------------------------------------------------------------------
__plot_bpf = FPP(HOW,LAG, push,time,val) {
FILE:	#include <queue>
	struct $tv { unsigned time; float val; };
	static int $ID;

decl:	std::queue<$tv> $q;
	int	$t0, $t1 = 0;
	float	$v0, $v1 = 0;
	int	$id = ++$ID;

exec:	if ($push) $q.push({$time, $val});

	float ret = $v1;
	int time = $(u.iota) - $LAG;
	if (time < 0) goto $ret;

	while (time >= $t1) {
		static int warned;
		if ($q.empty()) {
			if (!warned++)
				LOG("WARN! bpf[%d]: empty %d [%d %d]",
				    $id, time, $t0,$t1);
			goto $ret;
		}
		$t0 = $t1; $v0 = $v1;
		auto n = $q.front(); $q.pop();
		$t1 = n.time; $v1 = n.val;
		warned = 0;
	}

	switch ($HOW) {
	case 0:
		ret = time == $t0 ? $v0 : 0;
		break;
	case 1:
		ret = $v0 + float(time - $t0) / float($t1 - $t0) * ($v1 - $v0);
		break;
	default:
		assert(0);
	}

	$ret: ret;
};

plot_bpf = __plot_bpf(1);
